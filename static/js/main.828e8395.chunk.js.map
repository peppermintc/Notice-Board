{"version":3,"sources":["img/logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","dummy","title","content","App","useState","noticePage","setNoticePage","typingListTitle","setTypingListTitle","noticeListTitle","setNoticeListTitle","noticeTitle","setNoticeTitle","noticeContent","setNoticeContent","notice","setNotice","noticeList","setNoticeList","selectedNoticeIndex","setSelectedNoticeIndex","useEffect","onChangeNoticeTitleInput","e","target","value","onChangeNoticeContentInput","noticeHTML","index","ExpansionPanel","key","style","width","backgroundColor","border","margin","ExpansionPanelSummary","expandIcon","color","fontWeight","fontSize","height","paddingTop","display","float","verticalAlign","Button","size","startIcon","onClick","toggleEditDialog","indexToDelete","filter","ExpansionPanelDetails","openDialog","setOpenDialog","toggleDialog","openEditDialog","setOpenEditDialog","openNewListDialog","setOpenNewListDialog","toggleNewListDialog","List","padding","href","src","logo","alt","map","ListItem","button","length","alert","cursor","marginTop","textAlign","marginBottom","paddingBottom","paddingLeft","Dialog","onClose","open","DialogTitle","id","DialogContent","dividers","TextField","multiline","label","rows","onChange","variant","DialogActions","autoFocus","newList","addNewList","marginLeft","paddingRight","maxWidth","placeholder","updateNotice","Boolean","window","location","hostname","match","ReactDOM","render","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.828e8395.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7171d6b2.png\";","import React, { useState, useEffect } from 'react';\r\n// Image\r\nimport logo from './img/logo.png';\r\n// Material UI\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n//Material UI Icon\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddCircleOutline from '@material-ui/icons/AddCircleOutline';\r\nimport RemoveCircleOutline from '@material-ui/icons/RemoveCircleOutline';\r\n\r\n// Dummy data\r\nlet dummy = [\r\n  [\r\n    {title:'This is example Notice 1',content:\"Lorem ipsum, or lipsum as it is sometimes known, is dummy text used in laying out print, graphic or web designs. The passage is attributed to an unknown typesetter in the 15th century who is thought to have scrambled parts of Cicero's De Finibus Bonorum et Malorum for use in a type specimen book. 1\"}, \r\n    {title:'This is example Notice 2',content:\"this is example content\"} \r\n  ],\r\n  [\r\n    {title:'This is example Notice 1',content:\"this is example content 1\"}\r\n  ],\r\n  [\r\n    {title:'This is example Notice 1',content:\"this is example content 1\"},\r\n    {title:'This is example Notice 2',content:\"this is example content 2\"},\r\n    {title:'This is example Notice 3',content:\"this is example content 3\"}\r\n  ]\r\n];\r\n\r\nfunction App() {\r\n  // Hook\r\n  const [noticePage, setNoticePage] = useState(0);\r\n  const [typingListTitle, setTypingListTitle] = useState('');\r\n  const [noticeListTitle, setNoticeListTitle] = useState(['Work','Basketball Team','Shopping List']);\r\n  const [noticeTitle, setNoticeTitle] = useState('');\r\n  const [noticeContent, setNoticeContent] = useState('');\r\n  const [notice, setNotice] = useState({});\r\n  const [noticeList, setNoticeList] = useState(dummy[noticePage]);\r\n  const [selectedNoticeIndex, setSelectedNoticeIndex] = useState();\r\n  \r\n  // Changing Board\r\n  useEffect(()=>{setNoticeList(dummy[noticePage]);},[noticePage,noticeListTitle]);\r\n  useEffect(()=>{dummy[noticePage] = noticeList},[noticeList]);\r\n  \r\n  // Onchange event\r\n  const onChangeNoticeTitleInput = (e) => {\r\n    setNoticeTitle(e.target.value);\r\n  };\r\n  const onChangeNoticeContentInput = (e) => {\r\n    setNoticeContent(e.target.value);\r\n  };\r\n  const onChangeListTitleInput = (e) => {\r\n    setTypingListTitle(e.target.value);\r\n  };\r\n  \r\n  // ADD LIST\r\n  const addNewList = () => {\r\n    let newList = [];\r\n    \r\n    if(typingListTitle == '')\r\n    newList = [...noticeListTitle];\r\n    else\r\n    newList = [...noticeListTitle, typingListTitle];\r\n    \r\n    setNoticeListTitle(newList);\r\n    \r\n    dummy = [...dummy, []];\r\n    \r\n    setTypingListTitle('');\r\n    setNoticePage(newList.length-1);\r\n    toggleNewListDialog();\r\n  };\r\n  \r\n  // Create\r\n  useEffect(() => {if(!(!notice.title && !notice.content)) setNoticeList([...noticeList, notice])}, [notice])\r\n  const createNotice = () => {\r\n    setNotice({title: noticeTitle, content: noticeContent});\r\n    toggleDialog();\r\n  };\r\n  // Delete\r\n  const deleteNotice = (indexToDelete) => {\r\n    setNoticeList([...noticeList].filter((notice, index) => index !== indexToDelete));\r\n  };\r\n  // Update\r\n  const updateNotice = () => {\r\n    let newList = [...noticeList];\r\n    newList[selectedNoticeIndex].title = noticeTitle;     \r\n    newList[selectedNoticeIndex].content = noticeContent;     \r\n    setNoticeList(newList);\r\n    toggleEditDialog();\r\n  };\r\n  \r\n  // Notice HTML Piece\r\n  const noticeHTML = (notice, index) => {\r\n    return (\r\n      <ExpansionPanel key={index} style={{width:'60%', backgroundColor: '#1a232e', border: '5px dashed white', margin: '20px'}}>\r\n        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon style={{ color: 'white' }} />} style={{ color: '#FF9500', fontWeight: 'bold', fontSize: '18px' }} >\r\n          <div key={index} style={{ width:'100%', height: '100%', paddingTop: '3px' }}>\r\n            Index: {index+1}<br/>\r\n            Notice: {notice.title}\r\n          </div> \r\n          <div style={{ display: 'inline-block', float: 'right', verticalAlign: 'center' }}>\r\n              <Button size=\"small\" startIcon={<EditIcon style={{ color: 'white' }}/>} style={{ color: 'white' }} onClick={() => toggleEditDialog(index)}>Edit</Button>\r\n              <Button size=\"small\" startIcon={<DeleteIcon style={{ color: 'white' }}/>} style={{ color: 'white' }} onClick={() => deleteNotice(index)}>Delete</Button>\r\n          </div>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails style={{ color: 'white' }}>\r\n          {notice.content}\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    );\r\n  };\r\n\r\n  // CREATE Dialog toggle\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const toggleDialog = () => {\r\n    setOpenDialog(!openDialog);\r\n    setNoticeTitle('');\r\n    setNoticeContent('');\r\n  };\r\n  // EDIT Dialog Toggle\r\n  const [openEditDialog, setOpenEditDialog] = useState(false);\r\n  useEffect(() => {\r\n    if(openEditDialog) {\r\n      setNoticeTitle(noticeList[selectedNoticeIndex].title);\r\n      setNoticeContent(noticeList[selectedNoticeIndex].content);\r\n    } else {\r\n      setNoticeTitle('');\r\n      setNoticeContent('');\r\n    }\r\n  }, [openEditDialog]);\r\n  const toggleEditDialog = (index) => {\r\n    setSelectedNoticeIndex(index);\r\n    setOpenEditDialog(!openEditDialog);\r\n  };\r\n\r\n  // ADD NEW LIST Dialog toggle\r\n  const [openNewListDialog, setOpenNewListDialog] = useState(false);\r\n  const toggleNewListDialog = () => {\r\n    setOpenNewListDialog(!openNewListDialog);\r\n  };\r\n\r\n  // Remove Board\r\n  const removeBoard = (indexToDelete) => {\r\n    if(dummy.length !== 1) {\r\n      if(indexToDelete-1<0)\r\n        setNoticePage(0);\r\n        else\r\n        setNoticePage(indexToDelete-1);\r\n        dummy = [...dummy].filter((notice, index) => index !== indexToDelete);\r\n        setNoticeListTitle([...noticeListTitle].filter((notice, index) => index !== indexToDelete));\r\n      }\r\n    else {\r\n      alert('At least 1 board must exist');\r\n    }\r\n  };\r\n\r\n  // JSX\r\n  return (\r\n    <div style={{height: '100%'}}>\r\n      {/* Sidebar */}\r\n      <List style={{ float: 'left', height: '100%', backgroundColor: '#1a232e', color: 'white', width: '15%', padding: '0 0 0 0'}}>\r\n        <div>\r\n          <a href=\"/Notice-Board\"><img src={logo} alt=\"logo\" style={{ width: '250px', margin: '20px 10px 10px 10px' }}/></a>\r\n        </div>\r\n        \r\n        {noticeListTitle.map((noticeList, index) => {return ( \r\n          <div key={index}>\r\n            <ListItem button onClick={()=>setNoticePage(index)} style={{float:'left', display:'inline-block', width:'90%'}}>{noticeListTitle[index]}</ListItem> \r\n            <RemoveCircleOutline onClick={()=>removeBoard(index)} style={{color:'#FF9500', cursor:'pointer', float: 'left', display:'inline-block', marginTop:'9px'}} fontSize=\"small\"/>\r\n          </div>\r\n        ); })}\r\n\r\n        <div style={{textAlign:'center', marginTop:'60px', marginBottom:'20px'}}>\r\n          <div onClick={toggleNewListDialog} style={{color:'#FF9500', cursor:'pointer'}}>\r\n            <AddCircleOutline style={{marginTop:'30px'}} fontSize=\"large\"/>\r\n            <span style={{display:'inline-block',verticalAlign:'middle', paddingBottom:'28px',paddingLeft:'5px'}}>NEW BOARD</span>\r\n          </div>\r\n          \r\n          {/* ADD LIST DIALOG */}\r\n          <Dialog onClose={toggleNewListDialog} open={openNewListDialog} >\r\n            <DialogTitle id=\"customized-dialog-title\" onClose={toggleNewListDialog} >\r\n              Enter New Board Name\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n              <TextField multiline label=\"Board Name\" rows=\"1\" onChange={onChangeListTitleInput} variant=\"outlined\" style={{width:'100%'}}/>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button autoFocus onClick={()=>addNewList()} color=\"primary\" variant=\"contained\">\r\n                Save\r\n              </Button>\r\n              <Button onClick={toggleNewListDialog} color=\"primary\" variant=\"contained\">\r\n                Close\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      </List>\r\n\r\n      <div style={{ color:'white', float: 'left', width: '85%', height: '100%', backgroundColor: '#1a232e' }}>\r\n        <div style={{ height:'96px', width: '100%', backgroundColor: '#1a232e' }} />\r\n        <div style={{ fontWeight: 'bold', marginLeft: '20px', fontSize: '20px', display: 'inline-block'}}>Total Notice : {noticeList.length}</div>\r\n        <Button onClick={toggleDialog} style={{ marginLeft: '43%', backgroundColor: '#FF9500', color: '#1a232e', fontWeight: 'bold', paddingLeft: '15px', paddingRight: '15px' }}>Create</Button>\r\n\r\n        {/* CREATE DIALOG */}\r\n        <Dialog onClose={toggleDialog} open={openDialog} >\r\n          <DialogTitle id=\"customized-dialog-title\" onClose={toggleDialog} style={{ width: '45vw', maxWidth: '90%' }}>\r\n            <TextField label=\"Title\" onChange={onChangeNoticeTitleInput} placeholder={\"Enter Title\"} style={{width:'100%'}}/>\r\n          </DialogTitle>\r\n          <DialogContent dividers>\r\n            <TextField multiline label=\"Content\" rows=\"9\" onChange={onChangeNoticeContentInput} variant=\"outlined\" style={{width:'100%',height:'28vh'}}/>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button autoFocus onClick={()=>createNotice()} color=\"primary\" variant=\"contained\">\r\n              Save\r\n            </Button>\r\n            <Button onClick={toggleDialog} color=\"primary\" variant=\"contained\">\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        {/* EDIT DIALOG */}\r\n        <Dialog onClose={toggleEditDialog} open={openEditDialog} >\r\n          <DialogTitle id=\"customized-dialog-title\" onClose={toggleEditDialog} style={{ width: '45vw', maxWidth: '90%' }}>\r\n            <TextField label=\"Title\" value={noticeTitle} onChange={onChangeNoticeTitleInput} style={{width:'100%'}}/>\r\n          </DialogTitle>\r\n          <DialogContent dividers>\r\n            <TextField multiline label=\"Content\" value={noticeContent} rows=\"9\" onChange={onChangeNoticeContentInput} variant=\"outlined\" style={{width:'100%',height:'28vh'}}/>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button autoFocus onClick={()=>updateNotice()} color=\"primary\" variant=\"contained\">\r\n              Save\r\n            </Button>\r\n            <Button onClick={toggleEditDialog} color=\"primary\" variant=\"contained\">\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        {/* NOTICE LIST */}\r\n        {noticeList.map((notice, index) => { return noticeHTML(notice, index); })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Cookie\nimport { CookiesProvider } from 'react-cookie';\n\nReactDOM.render(\n  \n    <CookiesProvider>\n      <App />\n    </CookiesProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}